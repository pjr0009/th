exit
category_3.slug_candidates
exit
category_3.disciplines.all.map(&:name).join('-')
category_3disciplines.all.map(&:name).join('-')
disciplines.all.map(&:name).join('-')
category_3.disciplines
category_3
category_3.save
exit
category_3
category_3.save
category_3.name = "Saddles"
category_3.name = "saddles"
category_3
category_3.save
category_3
category_
category_3.disciplines
category_3
c
process.get(community_id: 111).data
c
result_set
c
common[:conversation_id]
common
c
result_set
c
result_set.first.to_json
c
result_set.first.to_json
c
result_set.first.to_json
result_set.first
c
result_set.first
c
result_set.first
c
result_set.first
c
result_set.first
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
             (current_participation.is_starter = FALSE AND transactions.author_skipped_feedback = FALSE AND testimonials.id IS NULL)
             (current_participation.is_starter = TRUE AND transactions.starter_skipped_feedback = FALSE AND testimonials.id IS NULL) OR
            ((transactions.current_state = 'confirmed') AND (
            )                                                 AS current_action_required,
             ((transactions.current_state = 'accepted' OR transactions.current_state = 'paid')         AND current_participation.is_starter = TRUE)
             ((transactions.current_state = 'pending' OR transactions.current_state = 'preauthorized') AND current_participation.is_starter = FALSE) OR
ConversationModel.where("            (
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
result_set
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
result_set.to_a
c
reload!
result_set.to_a
result_set.all
result_set
c
reload!
reult_set.to_a
c
reult_set.to_a
c
reload!
reult_set.to_a
reult_set
reult_Set
c
q
reload!
reult_set.to_a
reult_set.all
reult_set
result_set
c
connection.execute(sql).to_a
result_set
result_set = connection.execute(sql).to_a
q
reload!
r.to_a
r
r.map{|i| i}
r[0]
r[1]
r[q]
r[](1)
r[]
r.values.to_h
r.values
r.each_row {|r| puts r}
r.all
r.to_json
r = connection.execute(sql)
connection.execute(sql)
result_set
exit
shape[:units].last
shape[:units].length.last
shape[:units].length
shape
exit
@p1.last_community_updates_at
@p1
@community.admins.first
@community.admins
@community.admin
@community.person
@community
@user
person
@person
exit
Listing.select("date_trunc('seconds', updates_email_at)").to_json
Listing.select("date_trunc('seconds', updates_email_at)").error
Listing.select("date_trunc('seconds', updates_email_at)").errors
Listing.select("date_trunc('seconds', updates_email_at)").length
Listing.select("date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)").length
Listing.where("date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)").length
Listing.where("date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)").lenght
Listing.where("date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)").all
Listing.where("date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)")
Listing.where("date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)").count
Listing.where("updates_email_at > ? AND date_trunc('seconds', updates_email_at) > date_trunc('seconds', created_at)", Time.now).count
Listing.where("updates_email_at > ? AND date_trunc('seconds', updates_email_at > date_trunc('seconds', created_at)", Time.now).count
Listing.where("updates_email_at > ? AND date_trunc('seconds', updates_email_at > date_trunc('seconds', created_at"), Time.now).count
Listing.where("updates_email_at > ? AND date_trunc('seconds', updates_email_at > date_trunc('seconds', created_at", Time.now).count
Listing.where("updates_email_at > ? AND date_trunc('seconds', updates_email_at > date_trunc('seconds', created_at", Time.now)
quit
Listing.where("updates_email_at > ? AND updates_email_at > (created_at - INTERVAL '1.1' SECOND)", Time.now)
Listing..where("updates_email_at > ? AND updates_email_at > (created_at - INTERVAL '1.1' SECOND)", Time.now)
listings_to_email.last.created_at.strftime("%L")
exit
listings_to_email.last.created_at.strftime("%L")
listings_to_email.last.created_at.strftime("%u")
c
exit
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
listings_to_email.last.created_at
exit
listings_to_email.last.created_at
listings_to_email.last.updates_email_at
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
exit
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
listings_to_email.last.updates_email_at.change(:usec => 0)
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
listings_to_email.last.updates_email_at.change(:sec => 0)
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
listings_to_email.last.created_at.change(:sec => 0)
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
exit
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
exit
listings_to_email.last.updates_email_at - listings_to_email.last.created_at
listings_to_email.last.updates_email_at.offset
listings_to_email.last.created_at.offset
listings_to_email.last.created_at.zone
listings_to_email.last.updates_email_at.zone
listings_to_email.last.updates_email_at.to_date
listings_to_email.last.updates_email_at != listings_to_email.last.created_at
listings_to_email.last.updates_email_at > listings_to_email.last.created_at
listings_to_email.last.updates_email_at
listings_to_email.last
exit
listings_to_email.last.updates_email_at; listings_to_email.last.created_at
listings_to_email.last.updates_email_at > listings_to_email.last.created_at
listings_to_email.last.updates_email_at.to_i > listings_to_email.last.created_at.to_i
listings_to_email.last.created_at.to_i
listings_to_email.last.updates_email_at.to_i
listings_to_email.last.updates_email_at > listings_to_email.last.created_at
listings_to_email.last.updates_email_at
listings_to_email.last.email_updated_at
listings_to_email.last.created_at
listings_to_email.last
listings_to_email.length
